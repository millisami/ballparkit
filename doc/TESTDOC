Users controller:
 - should not allow non-admin users to access admin area
 - should allow admin users to access admin area
 - should have users array on GET to index

Estimates controller:
 - should not allow GET to /estimates without being logged in
 - should allow GET to /estimates and assign @estimates variable
 - should find estimate by id on GET to 'show'
 - should find estimate by id on GET to 'edit'
 - should support public view of estimate (doesn't require a login)
 - should rescue invalid token errors and handle appropriately
 - should build empty tasks when user doesn't have default tasks
 - should use default tasks when a user has default tasks
 - should create a short url when creating estimates

Sessions controller:
 - should show login page
 - should refuse login with blank OpenID
 - should refuse login with malformed OpenID
 - should logout successfully

Settings controller:
 - should not load settings without being logged in
 - should load index on GET to /settings
 - should find the @setting object by id on GET to /edit/1
 - should not allow editing of settings not belonging to logged in user

Application helper:
 - should set page title without a block
 - should set page title with a block
 - should section content with a header and yield content

Estimates helper:
 - should return default rate for new records
 - should return default rate for any format of price
 - should return nil for existing records
 - should return nil if user settings say not to use default rate
 - should yield the block with a discount
 - should not yield block if no discount

Browsing:

Default task:
 - should return true/false for task existence by setting and description (true case)
 - should return true/false for task existence by setting and description (false case)
 - should not care if description of task is proper case

Estimate:
 - should be a valid estimate
 - should require an estimate title
 - should list estimates in descending order by id
 - should support pagination
 - should create a unique SHA1 token after create
 - should find an estimate by a token
 - should raise InvalidToken error when invalid tokens
 - should total hours
 - should total price
 - should return 0 for totals other than hours or price
 - should have a discount
 - should return a total including the discount
 - should return a sub-total (not include discount)
 - sub-total should equal total price if no discount

Setting:
 - should delete all default tasks if clear_all is selected
 - should only delete default tasks belonging to that setting
 - should leave default tasks alone if clear_all is not selected
 - default_rate should not be allowed to have a $ sign
 - should not fail if default_rate is nil

Task:
 - should create default tasks if default is selected on update
 - should delete default tasks if default is de-selected
 - should not change default tasks if default is not chosen
 - total should multiply task hours and task rate
 - total should be a Floating point value
 - total should not care about hours and rate format
 - rate should not be allowed to have a $ sign
 - should not fail if rate is nil

User:
 - should be a valid user
 - should require and have errors on identity_url
 - should require and have errors on nickname
 - should require and have errors on email
 - should normalize identity_url with missing http://
 - should normalize identity_url with trailing slash
 - should be an invalid identity_url
 - should not be an admin by default
 - should be an admin if super_user flag is set
 - should successfully login for the first time and create a new user
 - should create a setting the first time a user logs in
 - should not create a setting each time a user logs in
 - should successfully login and update the user's sreg info
 - name should be titleized
 - should return a OpenStruct collection of defaults
 - should own a given object

